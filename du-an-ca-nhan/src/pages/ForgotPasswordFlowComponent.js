import React, { useState, useEffect } from "react";
import {
    Box, Typography, TextField, Button, Alert, Stepper, Step,
    StepLabel, Paper, Snackbar, Dialog, DialogTitle, DialogContent
} from "@mui/material";
import MuiAlert from '@mui/material/Alert';
import ReCAPTCHA from "react-google-recaptcha";
import { forgotPassword, verifyOtp, resetPassword } from "../services/accountService";
import { useNavigate } from "react-router-dom";

const ForgotPasswordFlowComponent = () => {
    const [step, setStep] = useState(0);
    const [emailOrUsername, setEmailOrUsername] = useState("");
    const [otp, setOtp] = useState("");
    const [newPassword, setNewPassword] = useState("");
    const [confirmPassword, setConfirmPassword] = useState("");
    const [error, setError] = useState("");
    const [message, setMessage] = useState("");
    const [snackbarOpen, setSnackbarOpen] = useState(false);
    const [otpTimer, setOtpTimer] = useState(60);
    const [otpResendCount, setOtpResendCount] = useState(0);
    const [captchaToken, setCaptchaToken] = useState(null);

    const navigate = useNavigate();

    useEffect(() => {
        let timer;
        if (step === 1 && otpTimer > 0) {
            timer = setInterval(() => setOtpTimer((prev) => prev - 1), 1000);
        }
        return () => clearInterval(timer);
    }, [step, otpTimer]);

    const handleSendOtp = async () => {
        setError(""); setMessage("");

        if (!captchaToken) return setError("Vui l√≤ng x√°c th·ª±c reCAPTCHA tr∆∞·ªõc khi g·ª≠i m√£!");

        if (!emailOrUsername) return setError("Vui l√≤ng nh·∫≠p email ho·∫∑c t√™n ƒëƒÉng nh·∫≠p");

        const res = await forgotPassword(emailOrUsername);
        if (res.success) {
            setMessage("‚úÖ M√£ OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i.");
            setStep(1);
            setOtpTimer(60);
            setOtpResendCount(otpResendCount + 1);
            setSnackbarOpen(true);
        } else {
            setError(res.message);
        }
    };

    const handleVerifyOtp = async () => {
        setError(""); setMessage("");
        if (!otp) return setError("Vui l√≤ng nh·∫≠p m√£ OTP");

        const res = await verifyOtp(emailOrUsername, otp);
        if (res.success) {
            setMessage("‚úÖ M√£ OTP h·ª£p l·ªá. B·∫°n c√≥ th·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u m·ªõi.");
            setStep(2);
        } else {
            setError(res.message);
        }
    };

    const handleResetPassword = async () => {
        setError(""); setMessage("");
        const strongPassword = /^(?=.*[A-Z])(?=.*[a-z])(?=.*\d).{6,}$/;

        if (!newPassword || newPassword !== confirmPassword) {
            return setError("M·∫≠t kh·∫©u kh√¥ng kh·ªõp ho·∫∑c ch∆∞a nh·∫≠p!");
        }
        if (!strongPassword.test(newPassword)) {
            return setError("M·∫≠t kh·∫©u c·∫ßn c√≥ √≠t nh·∫•t 6 k√Ω t·ª±, 1 ch·ªØ hoa, 1 ch·ªØ th∆∞·ªùng v√† 1 s·ªë.");
        }

        const res = await resetPassword(emailOrUsername, newPassword);
        if (res.success) {
            setMessage("üéâ ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng. Chuy·ªÉn h∆∞·ªõng...");
            setTimeout(() => navigate("/login"), 2000);
        } else {
            setError(res.message);
        }
    };

    return (
        <Box sx={{ maxWidth: 500, mx: "auto", mt: 5 }}>
            <Paper sx={{ p: 4 }} elevation={3}>
                <Typography variant="h5" fontWeight="bold" gutterBottom>üîê Qu√™n m·∫≠t kh·∫©u</Typography>

                <Stepper activeStep={step} alternativeLabel sx={{ mb: 3 }}>
                    {["Nh·∫≠p t√†i kho·∫£n", "Nh·∫≠p OTP", "ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u"].map((label) => (
                        <Step key={label}><StepLabel>{label}</StepLabel></Step>
                    ))}
                </Stepper>

                {error && <Alert severity="error" sx={{ mb: 2 }}>{error}</Alert>}
                {message && <Alert severity="success" sx={{ mb: 2 }}>{message}</Alert>}


                {step === 0 && (
                    <>
                        <TextField
                            label="Email ho·∫∑c T√™n ƒëƒÉng nh·∫≠p"
                            fullWidth
                            value={emailOrUsername}
                            onChange={(e) => setEmailOrUsername(e.target.value)}
                            sx={{ mb: 2 }}
                        />
                        <ReCAPTCHA
                            sitekey="6LfA9hErAAAAAOzmDJI1GyklnYfliaMVhvl8uHq8"
                            onChange={token => setCaptchaToken(token)}
                            sx={{ mb: 2 }}
                        />
                        <Button variant="contained" fullWidth onClick={handleSendOtp}>G·ª≠i m√£ OTP</Button>
                    </>
                )}


                {step === 1 && (
                    <>
                        <Typography gutterBottom>
                            M√£ OTP ƒë√£ g·ª≠i, c√≤n <strong>{otpTimer}s</strong> ƒë·ªÉ x√°c minh.
                        </Typography>
                        <TextField
                            label="Nh·∫≠p m√£ OTP"
                            fullWidth
                            value={otp}
                            onChange={(e) => setOtp(e.target.value)}
                            sx={{ mb: 2 }}
                        />
                        <Button variant="contained" fullWidth onClick={handleVerifyOtp}>
                            X√°c nh·∫≠n OTP
                        </Button>
                        <Button
                            disabled={otpTimer > 0 || otpResendCount >= 3}
                            onClick={handleSendOtp}
                            sx={{ mt: 2 }}
                        >
                            G·ª≠i l·∫°i m√£ OTP ({3 - otpResendCount} l·∫ßn c√≤n l·∫°i)
                        </Button>
                    </>
                )}

                {step === 2 && (
                    <>
                        <TextField
                            label="M·∫≠t kh·∫©u m·ªõi"
                            type="password"
                            fullWidth
                            value={newPassword}
                            onChange={(e) => setNewPassword(e.target.value)}
                            sx={{ mb: 2 }}
                        />
                        <TextField
                            label="X√°c nh·∫≠n m·∫≠t kh·∫©u"
                            type="password"
                            fullWidth
                            value={confirmPassword}
                            onChange={(e) => setConfirmPassword(e.target.value)}
                            sx={{ mb: 2 }}
                        />
                        <Button variant="contained" fullWidth onClick={handleResetPassword}>ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u</Button>
                    </>
                )}
            </Paper>

            <Snackbar
                open={snackbarOpen}
                autoHideDuration={3000}
                onClose={() => setSnackbarOpen(false)}
                anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}
            >
                <MuiAlert severity="success" onClose={() => setSnackbarOpen(false)}>
                    üéâ G·ª≠i l·∫°i m√£ OTP th√†nh c√¥ng!
                </MuiAlert>
            </Snackbar>
        </Box>
    );
};

export default ForgotPasswordFlowComponent;
